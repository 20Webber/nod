!!! 5
html
  head
    title Nod!
    meta(charset="utf-8")
    link(href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.0/css/bootstrap-combined.min.css",rel="stylesheet")
    script(src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js")
    script(src="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.0/js/bootstrap.min.js")
    script(src="nod.js")
    style
      body {margin-bottom:100px}
      .nod_msg {
        font-weight: bold;
      }
      .input-append, .input-prepend { font-size: 14px; } // bug in bootstrap?
  body


    .container
      h1#top nod for Twitter bootstrap 
        small A frontend validation library for bootstrap.
      hr
    
      p The plugin is made as a jQuery plugin and is activated like this: 
        code $("#form").nod( metrics );
      p The <code>metrics</code> is a lists that you build beforehand. It is basically a list of each selector and how you want it validated.
      p Example:
      pre
        | var metrics = [
        |   [ '#foo', 'presence', 'Cannot be empty' ],
        |   [ '#bar', 'min-length:4', 'Must be at least 4 characters long' ]
        | ];
      p First item is the selector (the validation will be applied to every field that the selector matches), second is what you wish to validate for, and last is the error message you wish to display.

      h2#metrics Metrics [ ]
      p Here is a table with what you can currently validate for:
      table.table.table-bordered
        thead
          tr
            th Name
            th Example
        tbody
          tr
            td presence
            td
              code [ '#foo', 'presence', 'Cannot be empty' ]
          tr
            td max-length:
              span.muted int
            td
              code [ '#foo', 'max-length:4, 'No longer than 4 characters please' ]
          tr
            td min-length:
              span.muted int
            td
              code [ '#foo', 'min-length:4, 'At least 4 characters please' ]
          tr
            td exact:
              span.muted string
            td
              code [ '#foo', 'exact:bar', 'You have to write "bar"!' ]
          tr
            td not:
              span.muted string
            td
              code [ '#foo', 'not:bar', 'Do not write "bar"!' ]
          tr
            td exact-length:
              span.muted int
            td
              code [ '#foo', 'exact-length:4', 'Must be exactly 4 characters' ]
          tr
            td between:
              span.muted int
              | :
              span.muted int
            td
              code [ '#foo', 'between:2:4', 'Must be between 2 and 4 characters long' ]
          tr
            td integer
            td
              code [ '#foo', 'integer', 'Must be a whole number' ]
          tr
            td float
            td
              code [ '#foo', 'float', 'Must be a number (decimals are fine)' ]
          tr
            td same-as:
              span.muted selector
            td
              code [ '#email_repeat', 'same-as:#email', 'Your emails does not match' ]
          tr
            td email
            td
              code [ '#foo', 'email', 'Must be a valid email (RFC822)' ]


      h2#options Options { }
      p You can also pass along an object: 
        code $("#form").nod( metrics, options );

      p Example:
      pre
        | var options = {
        |   'delay' : 200,
        |   'submitBtnSelector' : '#submit_btn'
        | };

      p Here is a table of everything you can change with the options object. 
        b Note 
        | that some of these values will straight up break the library unless you know exactly what you're doing.
      table.table.table-bordered
        thead
          tr
            th Name
            th Type
            th Default value
            th Description
        tbody
          tr
            td delay
            td Int
            td 700
            td Delay on `keyup` before it runs a check
          tr
            td disableSubmitBtn
            td Bool
            td true
            td Set to false if you don't want the submit button to be disabled
          tr
            td helpSpanDisplay
            td String
            td 'help-inline'
            td Set this to 'help-block' if you want error messages to be shown on next line
          tr
            td groupClass
            td String
            td 'error'
            td The .control-group will get this class if an error is found. Can be set to anything like, but 'error', 'info', 'warning', or 'success' makes the most sense with bootstrap :)
          tr
            td submitBtnSelector
            td String
            td '[type=submit]'
            td Selector to find the submit button
          tr
            td metricsSplitter
            td String
            td ':'
            td The ":" in "max-length:4"
          tr
            td errorPosClasses
            td List
            td ['.help-inline', '.add-on']
            td When placing the error message, nod will look for these elements and place it after these if they exist.
          tr
            td errorClass
            td String
            td 'nod_msg'
            td Used internally. This is the class you want to style if you want any specific styling
          tr
            td groupSelector
            td String
            td '.control-group'
            td Can't think of a reason to change this, but feel free.
          tr
            td disabledAttr
            td String
            td 'disabled'
            td Things will surely break if you change this.




      h2#examples Examples 
        small Have a look at the source to understand them

      hr

      // Checking for simple things
      form(action="").form.form-horizontal#a
        .control-group
          .control-label
            label Your age
          .controls
            input(type="text")#a_age
        .control-group
          .control-label
            label Email
          .controls
            input(type="text")#a_email
        .controls
          button(type="submit").btn Go!
      script
        // A list of all the fields we wish to validate
        //
        // Each sublist consists of three parts: selector, metrics, error msg
        //
        var a_metrics = [
          [ '#a_age', 'integer', 'A number, please' ],
          [ '#a_email', 'email', 'Not a valid email' ],
          [ '#a [type=text]', 'presence', 'Cannot be empty' ]
        ];
        $('#a').nod( a_metrics );


      hr


      form(action="").form.form-horizontal#b
        .control-group
          .control-label
            label Select something
          .controls
            select#b_select
              option(value="") Select something please
              option(value="1") Pick this
              option(value="2") Or this
              option(value="3") But not this
              option(value="4") This is fine though
        .control-group
          .control-label
            label Your credit card num
          .controls
            input(type="text")#b_credit
        .controls
          button(type="submit").btn Go!
      script
        var b_metrics = [
          [ '#b_select', 'presence', 'Pick something' ],
          [ '#b_select', 'not:3', 'I told you not to pick this one!' ],
          [ '#b_credit', 'between:12:19', 'Must be between 12 and 19 digits' ]
        ];
        $('#b').nod( b_metrics );

      hr


      form(action="").form.form-horizontal#c
        .control-group
          .control-label
            label Say something
          .controls
            input(type="text")
        .control-group
          .control-label
            label Select something
          .controls
            select#c_select
              option(value="") Select something please
              option(value="1") Pick this
        .control-group
          .controls
            label
              input(type="checkbox")#c_checkbox
              Check this!
        .controls
          button(type="submit").btn Go!
      script
        var c_metrics = [
          [ '#c input, #c select', 'presence', 'Can\'t be left blank' ]
        ];
        var c_options = {
          'groupClass' : 'warning',       // changing the class to warning
          'disableSubmitBtn': false       // not disabling the submit btn when errors exist
        }
        $('#c').nod( c_metrics , c_options );


      hr


      form(action="").form.form-horizontal#d
        .control-group
          .control-label
            label Your price
          .controls
            .input-append
              input(type="text")#d_price.span2
              span.add-on .00
        .control-group
          .control-label
            label Complicated matter
          .controls
            input(type="text")#d_complicated
            span.help-inline Some inline help text
            span.help-block Some block help text
        .controls
          button(type="submit").btn Go!
      script
        var d_metrics = [
          [ '#d input', 'presence', 'Can\'t be left blank' ]
        ];
        $('#d').nod( d_metrics );


      h2#other Other

      p Easiest compiled with 
       code coffee -wcj nod.js nod/*.coffee

