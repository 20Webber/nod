!!! 5
html
  head
    title Nod!
    meta(charset="utf-8")
    link(href="lib/bootstrap-combined.min.css",rel="stylesheet")
    link(href="lib/prettify.css")
    script(src="lib/jquery.min.js")
    script(src="lib/bootstrap.min.js")
    script(src="lib/prettify.js")
    script(src="nod.min.js")
    style
      body {margin-bottom:100px}
      .code { display: none }
      .nod_msg { background: #fcc; display: inline-block; padding: 2px 5px; margin-left: 5px; border-radius: 5px; }
      .container {margin-top:20px}
      h2 {margin-top:1.4em}
      .nod_msg {
        font-weight: bold;
      }
      .input-append, .input-prepend { font-size: 14px; } /* bug in bootstrap? */

      /* prettify */
      .com { color: #93a1a1; }
      .lit { color: #195f91; }
      .pun, .opn, .clo { color: #93a1a1; }
      .fun { color: #dc322f; }
      .str, .atv { color: #D14; }
      .kwd, .prettyprint .tag { color: #1e347b; }
      .typ, .atn, .dec, .var { color: teal; }
      .pln { color: #48484c; }

      .prettyprint {
        padding: 8px;
        background-color: #f7f7f9;
        border: 1px solid #e1e1e8;
      }
      .prettyprint.linenums {
        -webkit-box-shadow: inset 40px 0 0 #fbfbfc, inset 41px 0 0 #ececf0;
           -moz-box-shadow: inset 40px 0 0 #fbfbfc, inset 41px 0 0 #ececf0;
                box-shadow: inset 40px 0 0 #fbfbfc, inset 41px 0 0 #ececf0;
      }
      /* Specify class=linenums on a pre to get line numbering */
      ol.linenums {
        margin: 0 0 0 33px; /* IE indents via margin-left */
      }
      ol.linenums li {
        padding-left: 12px;
        color: #bebec5;
        line-height: 20px;
        text-shadow: 0 1px 0 #fff;
      }

    script
      $(document).ready(function(){
        var see_code = $('<button/>', 
            {html:"See code", class:"btn btn-mini see-code" }
          ).on( 'click', function() {
            $(this).next('.code').trigger('tgl');
          });
        $( 'form' ).on( 'submit', submitForm = function( e ) { e.preventDefault(); } ).after( see_code );
        $( '.code' ).on( 'tgl', function() {
          el = $(this);
          el.is(':visible') ? el.slideUp() : el.slideDown();
        });
      });


  body

    .container

      a(href="//github.com/casperin/nod",style="margin-top:10px;").btn.btn-success.pull-right
        i.icon-heart.icon-white
        | &nbsp;Clone me loverboy

      h1 Nod v.1.0.1 
        small A frontend validation jQuery plugin
      hr
      p Writing frontend validation for forms is painfully boring. So I made this in the hopes that it will help make it a little less agonizing for you.
      p It's designed to
      ul
        li Keep validation away from the fields to keep the html clean and simple
        li Work with selectors so you can target more fields with just one "rule"
        li Be flexible. You can easily define your own functions to validate for (and many other things)
        li Be extensible. If you look in the <a href="https://github.com/casperin/nod/tree/master/nod">source code</a>, it should be <a href="https://github.com/casperin/nod/blob/master/nod/checker.coffee">fairly easy to add new rules</a> or remove/add functionality
      p While it isn't strictly Bootstrap dependent, it defaults to the structure that bootstrap uses for its forms. However it should be flexible enough to accomodate most any structure.
      p Comments, bugs, suggestions and ideas are all very much appreciated.

      h2 Quick introduction
      p 
        |The plugin is made as a jQuery plugin and is activated like this: 
        code.prettyprint.lang-js $("#form").nod( metrics );
        |  The <code class="prettyprint lang-js">metrics</code> is a list that you build beforehand. It is basically a list of each selector and how you want it validated.
      p Example:
      pre.prettyprint.lang-js.linenums
        | var metrics = [
        |   [ '#foo', 'presence', 'Cannot be empty' ],
        |   [ '#bar', 'min-length:4', 'Must be at least 4 characters long' ]
        | ];
        | 
        | $( "#form" ).nod( metrics );
      
      p Each "sublist" consists of three parts:
      ol
        li The selector (the validation will be applied to every field that the selector matches)
        li A string describing what you wish to validate for (see below for documentation)
        li The error message you wish to display on error


      h2#metrics Metrics [ ]
      p Here is a table with what you can currently validate for:
      table.table.table-bordered
        thead
          tr
            th Name
            th Example
        tbody
          tr
            td 'presence'
            td
              code.prettyprint.lang-js [ '#foo', 'presence', 'Cannot be empty' ]
          tr
            td 'exact:
              span.muted String
              | '
            td
              code.prettyprint.lang-js [ '#foo', 'exact:bar', 'You have to write "bar"!' ]
          tr
            td 'not:
              span.muted String
              | '
            td
              code.prettyprint.lang-js [ '#foo', 'not:bar', 'Do not write "bar"!' ]
          tr
            td 'max-length:
              span.muted Number
              | '
            td
              code.prettyprint.lang-js [ '#foo', 'max-length:4', 'No longer than 4 characters please' ]
          tr
            td 'min-length:
              span.muted Number
              | '
            td
              code.prettyprint.lang-js [ '#foo', 'min-length:4', 'At least 4 characters please' ]
          tr
            td 'exact-length:
              span.muted Number
              | '
            td
              code.prettyprint.lang-js [ '#foo', 'exact-length:4', 'Must be exactly 4 characters' ]
          tr
            td 'between:
              span.muted Number
              | :
              span.muted Number
              | '
            td
              code.prettyprint.lang-js [ '#foo', 'between:2:4', 'Must be between 2 and 4 characters long' ]
          tr
            td 'max-num:
              span.muted Number
              | '
            td
              code.prettyprint.lang-js [ '#foo', 'max-num:4', 'Type in a number that is at smaller than 5' ]
          tr
            td 'min-num:
              span.muted Number
              | '
            td
              code.prettyprint.lang-js [ '#foo', 'min-num:4', 'Type in a number that is bigger than 3' ]
          tr
            td 'between-num:
              span.muted Number
              | :
              span.muted Number
              | '
            td
              code.prettyprint.lang-js [ '#foo', 'between-num:2:4', 'Type in a number between 2 and 4' ]
          tr
            td 'integer'
            td
              code.prettyprint.lang-js [ '#foo', 'integer', 'Must be a whole number' ]
          tr
            td 'float'
            td
              code.prettyprint.lang-js [ '#foo', 'float', 'Must be a number (decimals are fine)' ]
          tr
            td 'same-as:
              span.muted Selector
              | '
            td
              code.prettyprint.lang-js [ '#email_repeat', 'same-as:#email', 'Your emails do not match' ]
          tr
            td 'email' 
              small (
                a(href="#email") read this
                | )
            td
              code.prettyprint.lang-js [ '#foo', 'email', 'Must be a valid email (RFC 822)' ]
          tr
            td.muted Function
            td
              code.prettyprint.lang-js [ '#foo', ( function(x) { return x % 2 == 0; } ), 'Must be divisible by two' ]
          tr
            td.muted RegExp
            td
              code.prettyprint.lang-js [ '#foo', /Hello/, 'String must contain the word "Hello"' ]

      p If there is something not on the list that you think others would benefit from, then feel free to 
        a(href="https://github.com/casperin/nod/issues") create a new issue 
        | and let me know.



      h2#options Options { }
      p You can also pass along an object: 
        code.prettyprint.lang-js $("#form").nod( metrics, options );

      p Example:
      pre.prettyprint.lang-js.linenums
        | var options = {
        |   'delay' : 200,
        |   'submitBtnSelector' : '#submit_btn'
        | };

      p Here is a table of everything you can change with the options object. 
      table.table.table-bordered
        thead
          tr
            th Name
            th Type
            th Default value
            th Description
        tbody
          tr
            td delay
            td Number
            td 700
            td Delay on <code>keyup</code> before it runs a check. Set it to <code>false</code> to disable completely.
          tr
            td disableSubmitBtn
            td Bool
            td true
            td Set to false if you don't want the submit button to be disabled.
          tr
            td helpSpanDisplay
            td String
            td 'help-inline'
            td Set this to <code>help-block</code> if you want error messages to be shown on next line.
          tr
            td groupClass
            td String
            td 'error'
            td The <code>.control-group</code> will get this class if an error is found. Can be set to anything you like, but <code>error</code>, <code>info</code>, <code>warning</code>, or <code>success</code> makes the most sense with bootstrap.
          tr
            td submitBtnSelector
            td String
            td '[type=submit]'
            td Selector to find the submit button. If the form is submitted with a button that is not a member of this selector, then the form will be submitted regardless of errors.
          tr.muted
            td
              del metricsSplitter
            td
              del String
            td
              del ':'
            td
              del The <code>:</code> in <code>max-length:4</code>
              | 
              span.label Gone in 1.0.1
          tr
            td errorPosClasses
            td Array
            td ['.help-inline', '.add-on', button, '.input-append']
            td When placing the error message, nod will look for these elements (after and above) and place it after these if they exist.
          tr
            td errorClass
            td String
            td 'nod_msg'
            td Used internally. This is the class you want to style if you want any specific styling.
          tr
            td broadcastError
            td Bool
            td false
            td If set to <code>true</code>, nod will trigger an event on the window object. (<a href="#broadcast">Read more</a>)
          tr
            td groupSelector
            td String
            td '.control-group'
            td The selector for something surrounding your input elements. Like <code>.control-group</code> in bootstrap forms.
          tr.muted
            td 
              del disabledAttr
            td 
              del String
            td 
              del 'disabled'
            td 
              del Things will surely break if you change this.
              | 
              span.label Gone in 1.0.1

      p
        span.label.label-info Notice 
        |  Some of these values will straight up break the plugin unless you know exactly what you're doing.


      h2#notes Notes

      h3#radio Radio buttons
      p These can be a bit tricky to validate, so here's an example.
      pre.prettyprint.lang-html.linenums
        | <div class="control-group">
        |   <div class="controls">
        |     <label class="radio">
        |       <input type="radio" name="a" value="a1" id="bar"> First
        |     </label>
        |     <label class="radio">
        |       <input type="radio" name="a" value="a2"> Second
        |     </label>
        |     <label class="radio">
        |       <input type="radio" name="a" value="a3"> Third
        |     </label>
        |   </div>
        | </div>
        | <!-- ... -->
        | <button data-loading-text="loading..." type="submit" class="btn btn-success">Submit form</button>
      p Pretty standard html. Notice the <code>#bar</code> on line 4 though. To validate for presence on these fields, we don't need the <code>#bar</code>, we just do
      pre.prettyprint.lang-js.linenums
        | var metrics = [
        |     ['[name=a]', 'presence', 'You must click on at least one radio button']
        | ];
        | 
        | $( "#form" ).nod( metrics );
      p However if we want people to specifically click on a particular radio button, we do (line 2 is still important)
      pre.prettyprint.lang-js.linenums
        | var metrics = [
        |     ['[name=a]', 'presence', 'You must click on at least one radio button'],
        |     ['#bar', 'exact:a1', 'You must click on *this* radio button']
        | ];
        | 
        | $( "#form" ).nod( metrics );
      p Conversely we can use the keyword <code>not</code> instead of <code>exact</code>.
      p
        span.label.label-info Notice
        | 
        code name
        |  attribute is mandatory on the input fields for all of these.

      h3#ajax Ajax checking
      p Yes, it works. Here's some code:
      pre.prettyprint.lang-js.linenums
        | var getFn = function( value ) {
        |     $.get('check_email.php', value);
        | };
        | 
        | var metrics = [
        |     ['#email', getFn, 'This email is already in use']
        | ];
        | 
        | $( "#form" ).nod( metrics );
      p Nod.js will take whatever response it gets from the server and evaluate it to a boolean and use that as an indicator for whether the input is valid.  Further, if your submit button has <code>data-loading-text</code>, this will be swapped while the check is going on (and swapped back when done, regardless of errors).


      h3#email Email validation
      p Don't use this. Validating emails should be done backend (by sending an email) and not frontend. I've used the most lax regex for checking emails that I could find (RFC822) so as to err on the side of letting too many emails through rather than rejecting valid emails; but really, you ought not to use frontend email validation at all.

      h3#broadcast Broadcasting
      p Say you want to log to your server everytime users make errors in your fields, then set <code>broadcastError : true</code> in your options object and listen for <code>nod_error_fired</code> on the window oject, like this:
      pre.prettyprint.lang-js.linenums
        | var log_error = function( event, data ) {
        |   console.log( data.el );
        |   console.log( data.msg );
        | }
        |  
        | $( window ).on( 'nod_error_fired', log_error );
      p As you can see, you'll get an object with the element (actually the <code>$(el)</code>) and one with the error message.


      h2#download Downloading
      p Go to 
        a(href="//github.com/casperin/nod") github.com/casperin/nod
        |  and clone it. For just a quick plug and play you only need the 
        a(href="https://github.com/casperin/nod/blob/master/nod.js") nod.js
        | or 
        a(href="https://github.com/casperin/nod/blob/master/nod.min.js") nod.min.js
        | .

      p#bower
        strong Bower: 
        code jquery-nod


      h2#contribute Contributing
      p This project is still young so there is plenty of room for improvements, so clone the development branch (we use git flow) and hack away. Nod.js is written in <a href="http://coffeescript.org/">CoffeeScript</a>. Check out <a href="https://github.com/casperin/nod/tree/develop/nod">the source here</a>. I tried my best to comment the code to make it easy to dive in, but in case you have questions I'd be happy to elaborate. Right now we're (slowly) moving to using Yeoman and Gruntjs, so you will probably want to use that too. It's a bit messy though; but you can test some stuff with <code>grunt test</code>, and concat and minify a version with <code>grunt build</code>. A server is run via <code>grunt server</code>, but (currently) doesn't update on changes to the test files.
      p If you don't have anything particular you want to contribute with, but just love nod.js so much that you still want to do something (wow, I love you too man!), then...
      ol
        li Tests! There is currently not a single test unless you think of CoffeeLint as testing (this is one of the reasons why we're moving to yeoman)
        li Write examples (see below) and <a href="https://github.com/casperin/nod/tree/develop/dev/examples">look here</a> for current ones (written in jade).
        li Clean up gruntfile
        li <a href="https://github.com/casperin/nod/issues">Issues...</a>
      

      h2#examples Examples
      include examples/ex1
      include examples/ex2
      include examples/ex3

    script !function($) { $(function(){ window.prettyPrint && prettyPrint() }) }(window.jQuery);
